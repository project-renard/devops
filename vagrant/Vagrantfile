require "etc"

def debian_shell_provision( config, org_toplevel )
	prefix = '~/project-renard/devops/script'
	if( File.exists?(File.join(org_toplevel, 'devops', 'devops')) )
		prefix = '~/project-renard/devops/devops/script'
	end
	config.vm.provision "shell", privileged: false, inline: "perl #{prefix}/helper.pl vagrant"
end

def create_and_add_ssh_key()
	privkey_path = '.id_vagrant'
	pubkey_path = '.id_vagrant.pub'
	authorized_keys_path = File.expand_path("~/.ssh/authorized_keys")

	if not File.exists?(privkey_path)
		system('ssh-keygen -N "" -f .id_vagrant')
		# add the current directory to the end
		pubkey = File.readlines(pubkey_path)[0].chomp
		File.write( pubkey_path,
			"#{pubkey} #{File.absolute_path(pubkey_path)}\n" )
	end

	pubkey = File.readlines(pubkey_path)[0]
	if not File.exists?(authorized_keys_path) or
			not File.readlines(authorized_keys_path).include?(pubkey)
		# append the key to the file
		open(authorized_keys_path, 'a') do |f|
			f.puts pubkey
		end
	end

	privkey = File.readlines(privkey_path).join("")
	return privkey
end
privkey = create_and_add_ssh_key()

def add_synced_folders( config, org_toplevel, options = {} )
	for project_dir in %w[curie test-data devops release homebrew-project-renard travis-homebrew-bottle p5-Alien-MuPDF] do
		host_dir = File.absolute_path(File.join(org_toplevel, project_dir))
		guest_dir_rel = "project-renard/#{project_dir}"
		if options[:type] == 'sshfs'
			top = '~' # shell will expand this
			guest_dir = "#{top}/#{guest_dir_rel}"
			config.vm.provision :shell, privileged: false,
				run: "always",
				inline: <<SHELL
# if directory does not exist or is empty
if [ ! -d #{guest_dir} ] || [ ! "$(ls -A #{guest_dir})"  ] ; then
	mkdir -p #{guest_dir};
	sshfs #{Etc.getlogin}@10.0.2.2:#{host_dir} #{guest_dir};
fi
SHELL
		else
			top = '/home/vagrant'
			guest_dir = "#{top}/#{guest_dir_rel}"
			config.vm.synced_folder( host_dir, guest_dir )
		end
	end
end

org_toplevel = "../.." # /path/to/vagrant/../..
if Dir.exists?("../../../devops")
	org_toplevel = "../../.." # the project-renard directory
end

Vagrant.configure(2) do |config|
	config.ssh.forward_x11 = true

	config.vm.define :trusty64, primary: true do |trusty|
		trusty.vm.box = 'ubuntu/trusty64'
		add_synced_folders( trusty, org_toplevel )
		debian_shell_provision(trusty, org_toplevel)
	end

	config.vm.define :jessie64, autostart: false do |jessie|
		jessie.vm.box = "debian/contrib-jessie64"
		add_synced_folders( jessie, org_toplevel )
		debian_shell_provision(jessie, org_toplevel)
	end

	config.vm.define :precise64, autostart: false do |precise|
		precise.vm.box = "ubuntu/precise64"
		add_synced_folders( precise, org_toplevel )
		debian_shell_provision(precise, org_toplevel)
	end

	# To add the Sierra box, run
	#
	#     $ vagrant box add http://files.dryga.com/boxes/osx-sierra-0.3.1.box --name AndrewDryga/vagrant-box-osx-sierra
	#
	# See <https://atlas.hashicorp.com/AndrewDryga/boxes/vagrant-box-osx>
	# for more information.
{
	'osx-yosemite' => {
			vnc_port: 5908,
			box: 'AndrewDryga/vagrant-box-osx' },
	'osx-sierra'   => {
			vnc_port: 5909,
			box: 'AndrewDryga/vagrant-box-osx-sierra' },
}.each	do |name, data|
	config.vm.define name, autostart: false do |osx|
		osx.vm.box = data[:box]
		#osx.vm.network :private_network, ip: "192.168.0.0"
		osx.vm.network "public_network"

		# Sets up VNC on Mac OSX. Connect from host machine by running:
		#
		#     $ echo 'vagrant' | xtightvncviewer -autopass :8
		#
		# The VNC password is "vagrant".
		#
		# The password for the Vagrant user is "vagrant".
		osx.vm.network "forwarded_port", guest: 5900, host: data[:vnc_port]
		osx.vm.provision :shell, privileged: false, inline: <<SHELL
# <https://serverfault.com/questions/120559/vnc-viewer-not-connecting-to-mac-from-windows>
export VNC_PASSWD="vagrant";
sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -off -restart -agent -privs -all -allowAccessFor -allUsers -clientopts -setvncpw -vncpw $VNC_PASSWD -setvnclegacy -vnclegacy yes
SHELL

		osx.vm.provision :shell, privileged: false, inline: File.readlines('../script/from-vagrant/os-install-osx-sshfs').join("")
		osx.vm.provision :shell, privileged: false, inline: <<SHELL
echo '#{privkey}' > ~/.ssh/id_host
chmod 600 ~/.ssh/id_host
# force adding to ~/.ssh/known_hosts so no verification needed
ssh -o StrictHostKeyChecking=no #{Etc.getlogin}@10.0.2.2 -n true
SHELL
		add_synced_folders( osx, org_toplevel, type: "sshfs" )
		osx.vm.provision :shell, privileged: false, inline: <<SHELL
if [ -d "$HOME/project-renard/devops/devops/vagrant" ]; then
	$HOME/project-renard/devops/devops/vagrant/patch-osx-python
else
	$HOME/project-renard/devops/vagrant/patch-osx-python
fi
SHELL

	end
end

end
