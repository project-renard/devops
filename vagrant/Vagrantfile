require "etc"

# From <https://superuser.com/questions/701735/run-script-on-host-machine-during-vagrant-up/992220#992220>
module LocalCommand
    class Config < Vagrant.plugin("2", :config)
        attr_accessor :command
    end

    class Plugin < Vagrant.plugin("2")
        name "local_shell"

        config(:local_shell, :provisioner) do
            Config
        end

        provisioner(:local_shell) do
            Provisioner
        end
    end

    class Provisioner < Vagrant.plugin("2", :provisioner)
        def provision
            result = system "#{config.command}"
        end
    end
end

# From <https://github.com/aidanns/vagrant-reload/blob/master/lib/vagrant-reload.rb>
module VagrantPlugins
  module Reload

    VERSION = "0.0.1"

    class Plugin < Vagrant.plugin("2")
      name "Reload"
      description <<-DESC
      The reload plugin allows a VM to be reloaded as a provisioning step.
      DESC

      provisioner "reload" do
        class ReloadProvisioner < Vagrant.plugin("2", :provisioner)

          def initialize(machine, config)
            super
          end

          def configure(root_config)
          end

          def provision
            options = {}
            options[:provision_ignore_sentinel] = false
            options[:force_halt] = true
            @machine.action(:halt, force_halt: options[:force_halt])
            @machine.action(:reload, options)
            begin
              sleep 10
            end until @machine.communicate.ready?
          end

          def cleanup
          end

        end
        ReloadProvisioner

      end
    end
  end
end


def debian_shell_provision( config, org_toplevel )
	prefix = '~/project-renard/devops/script'
	if( File.exists?(File.join(org_toplevel, 'devops', 'devops')) )
		prefix = '~/project-renard/devops/devops/script'
	end
	config.vm.provision "shell", privileged: false, inline: "cd ~/project-renard; perl #{prefix}/helper.pl vagrant"
end

def create_and_add_ssh_key()
	privkey_path = '.id_vagrant'
	pubkey_path = '.id_vagrant.pub'
	authorized_keys_path = File.expand_path("~/.ssh/authorized_keys")

	if not File.exists?(privkey_path)
		system('ssh-keygen -N "" -f .id_vagrant')
		# add the current directory to the end
		pubkey = File.readlines(pubkey_path)[0].chomp
		File.write( pubkey_path,
			"#{pubkey} #{File.absolute_path(pubkey_path)}\n" )
	end

	pubkey = File.readlines(pubkey_path)[0]
	if not File.exists?(authorized_keys_path) or
			not File.readlines(authorized_keys_path).include?(pubkey)
		# append the key to the file
		open(authorized_keys_path, 'a') do |f|
			f.puts pubkey
		end
	end

	privkey = File.readlines(privkey_path).join("")
	return privkey
end
privkey = create_and_add_ssh_key()

def add_synced_folders( config, org_toplevel, options = {} )
	for project_dir in %w[curie test-data devops release homebrew-project-renard travis-homebrew-bottle
				p5-Alien-MuPDF
				p5-Alien-pdf2htmlEX p5-Alien-Poppler p5-Alien-OpenJPEG p5-Alien-FontForge
				p5-Alien-Graphene

				p5-Renard-Boteh
				p5-Renard-Incunabula
				p5-Renard-API-Cairo
				p5-Renard-Incunabula-Document
				p5-Renard-Block-Format-Cairo
				p5-Renard-Block-Format-OOXML
				p5-Renard-Block-Format-PDF
				p5-Renard-API-Gtk3
				p5-Renard-API-Glib
				p5-Renard-Block-NLP
				p5-Renard-API-MuPDF-Inline
				p5-Renard-API-MuPDF-mutool
				p5-Renard-Block-DICT
				p5-Renard-Block-Google-Scholar
				p5-Renard-Block-Google-Translate
				p5-Renard-Block-MediaWiki
				p5-Renard-Block-Speech-Synthesis
				p5-Renard-Jacquard
				p5-Renard-Taffeta
				p5-Renard-Yarn
			] do
		host_dir = File.absolute_path(File.join(org_toplevel, project_dir))
		guest_dir_rel = "project-renard/#{project_dir}"
		if options[:type] == 'sshfs'
			top = '~' # shell will expand this
			guest_dir = "#{top}/#{guest_dir_rel}"
			config.vm.provision :shell, privileged: false,
				run: "always",
				inline: <<~SHELL
					# if directory does not exist or is empty
					if [ ! -d #{guest_dir} ] || [ ! "$(ls -A #{guest_dir})"  ] ; then
						mkdir -p #{guest_dir};
						sshfs #{Etc.getlogin}@10.0.2.2:#{host_dir} #{guest_dir};
					fi
				SHELL
		else
			top = '/home/vagrant'
			guest_dir = "#{top}/#{guest_dir_rel}"
			config.vm.synced_folder( host_dir, guest_dir )
		end
	end
end

org_toplevel = "../.." # /path/to/vagrant/../..
if Dir.exists?("../../../devops")
	org_toplevel = "../../.." # the project-renard directory
end

Vagrant.configure(2) do |config|
	config.ssh.forward_x11 = true

	config.vm.define :trusty64, primary: true do |trusty|
		trusty.vm.box = 'ubuntu/trusty64'
		add_synced_folders( trusty, org_toplevel )
		debian_shell_provision(trusty, org_toplevel)
	end

	config.vm.define :jessie64, autostart: false do |jessie|
		jessie.vm.box = "debian/contrib-jessie64"
		add_synced_folders( jessie, org_toplevel )
		debian_shell_provision(jessie, org_toplevel)
	end

	config.vm.define :precise64, autostart: false do |precise|
		precise.vm.box = "ubuntu/precise64"
		add_synced_folders( precise, org_toplevel )
		debian_shell_provision(precise, org_toplevel)
	end

	# To add the Yosemite box, run
	#
	#     $ vagrant box add https://vagrantcloud.com/AndrewDryga/boxes/vagrant-box-osx/versions/0.2.1/providers/virtualbox.box --name AndrewDryga/vagrant-box-osx-yosemite
	#
	# To add the Sierra box, run
	#
	#     $ vagrant box add http://files.dryga.com/boxes/osx-sierra-0.3.1.box --name AndrewDryga/vagrant-box-osx-sierra
	#
	# See <https://atlas.hashicorp.com/AndrewDryga/boxes/vagrant-box-osx>
	# for more information.
{
	'osx-yosemite-10.10' => {
			vnc_port: 5908,
			box: 'AndrewDryga/vagrant-box-osx-yosemite' },
	'osx-sierra-10.12'   => {
			vnc_port: 5909,
			box: 'AndrewDryga/vagrant-box-osx-sierra' },
}.each	do |name, data|
	config.vm.define name, autostart: false do |osx|
		osx.vm.box = data[:box]
		#osx.vm.network :private_network, ip: "192.168.0.0"
		osx.vm.network "public_network"

		# Sets up VNC on Mac OSX. Connect from host machine by running:
		#
		#     $ echo 'vagrant' | xtightvncviewer -autopass :8
		#
		# The VNC password is "vagrant".
		#
		# The password for the Vagrant user is "vagrant".
		osx.vm.network "forwarded_port", guest: 5900, host: data[:vnc_port]
		osx.vm.provision :shell, privileged: false, inline: <<~SHELL
			# <https://serverfault.com/questions/120559/vnc-viewer-not-connecting-to-mac-from-windows>
			export VNC_PASSWD="vagrant";
			sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -off -restart -agent -privs -all -allowAccessFor -allUsers -clientopts -setvncpw -vncpw $VNC_PASSWD -setvnclegacy -vnclegacy yes
		SHELL

		osx.vm.provision :shell, privileged: false, inline: File.readlines('../script/from-vagrant/os-install-osx-sshfs').join("")
		osx.vm.provision :shell, privileged: false, inline: <<~SHELL
			echo '#{privkey}' > ~/.ssh/id_host
			chmod 600 ~/.ssh/id_host
			# force adding to ~/.ssh/known_hosts so no verification needed
			ssh -o StrictHostKeyChecking=no #{Etc.getlogin}@10.0.2.2 -n true
		SHELL
		add_synced_folders( osx, org_toplevel, type: "sshfs" )

		osx.vm.provision :shell, privileged: false, inline: <<~SHELL
			brew install cpanminus openssl
			export PKG_CONFIG_PATH='/usr/local/opt/openssl/lib/pkgconfig'
			export PATH="/usr/local/opt/openssl/bin:$PATH"
			cpanm --local-lib=~/perl5 local::lib && eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)
			cpanm Net::SSLeay
			echo 'eval $(perl -I ~/perl5/lib/perl5/ -Mlocal::lib)' >> ~/.bashrc
		SHELL

		osx.vm.provision :shell, privileged: false, inline: <<~SHELL
			if [ -d "$HOME/project-renard/devops/devops/vagrant" ]; then
				$HOME/project-renard/devops/devops/vagrant/patch-osx-python
			else
				$HOME/project-renard/devops/vagrant/patch-osx-python
			fi
		SHELL
	end
end

	config.vm.define :win10, autostart: false do |win10|
		win10.vm.box = "Microsoft/EdgeOnWindows10"
		win10.ssh.username = "IEUser"
		# Do not need to use password authentication since we will install our own key.
		#win10.ssh.password = "Passw0rd!"
		win10.ssh.private_key_path = '.id_vagrant'
		win10.vm.boot_timeout = 2

		# This does not work, so we use the SSH pipe approach.
		#config.vm.provision "file", source: ".id_vagrant.pub", destination: "~/.ssh/authorized_keys"

		# Disable the default synced folder.
		config.vm.synced_folder ".", "/vagrant", disabled: true

		# Sends the SSH key over a pipe.
		config.vm.provision "add ssh public key", type: "local_shell", command: <<~SHELL
			sshpass -p 'Passw0rd!' vagrant ssh win10 -- 'IFS=$'\''\\n'\''; while read -r; do printf "%s\\n" $REPLY >> ~/.ssh/authorized_keys ; done' < .id_vagrant.pub
		SHELL

		win10.ssh.insert_key = true

		win10.vm.provision "Install Chocolatey", type: "local_shell", command: <<~SHELL
			sshpass -p 'Passw0rd!' vagrant ssh win10 -- "PowerShell -Command 'Set-ExecutionPolicy Bypass -Scope Process -Force; iwr https://chocolatey.org/install.ps1 -UseBasicParsing | iex'"
			sshpass -p 'Passw0rd!' vagrant ssh win10 -- 'export PATH="$PATH:/cygdrive/c/ProgramData/chocolatey/bin"; choco install -y --allowemptychecksum strawberryperl'
			sshpass -p 'Passw0rd!' vagrant ssh win10 -- 'export PATH="$PATH:/cygdrive/c/ProgramData/chocolatey/bin"; choco install -y --allowemptychecksum git'
			sshpass -p 'Passw0rd!' vagrant ssh win10 -- 'export PATH="$PATH:/cygdrive/c/ProgramData/chocolatey/bin"; choco install -y --allowemptychecksum msys2 --params " /InstallDir:C:/msys64"'
		SHELL

		## Start VBoxSDL:
		##   VBoxSDL --startvm $(cat ./.vagrant/machines/win10/virtualbox/id) --separate
		# path C:\strawberry\perl\bin;C:\strawberry\perl\site\bin;C:\strawberry\c\bin;%PATH%
		# path C:\Program Files\Git\bin;%PATH%

		#win10.vm.provision :reload

		#add_synced_folders( win10, org_toplevel )
	end

end
